filetype: c

rules:
    whitespace:
        pattern: "space+"
        capture: whitespace
    line_comment:
        pattern: "'//' (!'\n' .)*"
    block_comment:
        pattern: "'/*' (!'*/' .)* '*/'?"
    comment:
        pattern: "line_comment / block_comment"
        capture: comment
    sq_str:
        pattern: >-
            "'" (escape / (!"'" .))* "'"?
    dq_str:
        pattern: >-
            '"' (escape / (!'"' .))* '"'?
    escape:
        pattern: "'\\\\' ['\"tnbfr\\\\]"
        capture: "special"
    string: 
        pattern: "sq_str / dq_str"
        capture: "string"
    float_suffix:
        pattern: "'f'?"
    long_suffix:
        words: ["l", "L", "ll", "LL"]
    integer_suffix:
        pattern: >-
            ([uU]? long_suffix?) / (long_suffix? [uU]?)
    number:
        pattern: "(float float_suffix) / (integer integer_suffix)"
        capture: number
    preproc_word:
        words: [
            'define', 'elif', 'else', 'endif', 'error', 'if', 'ifdef', 'ifndef', 'line',
            'pragma', 'undef', 'warning'
        ]
    preproc:
        pattern: "(('#' [\t ]* preproc_word) / ('#' [\t ]* 'include')) ([\t ]* preproc_string?)"
        capture: preproc
    preproc_string:
        pattern: >-
            '<' (!'>' .)* '>'?
        capture: string
    storage_class:
        words: [
            'typedef', 'extern', 'static', '_Thread_local', 'auto', 'register',
        ]
    type_qualifier:
        words: [
            'const', 'restrict', 'volatile', '_Atomic',
        ]
    function_specifier:
        words: [
            'inline', '_Noreturn',
        ]
    extra_keywords:
        words: [
            'asm', '__asm', '__asm__', '__restrict__', '__inline', '__inline__',
            '__attribute__', '__declspec'
        ]
    normal_keyword:
        words: [
            'break', 'case', 'continue', 'default', 'do', 'else', 'enum', 'for', 'goto',
            'if', 'return', 'switch', 'while',
            '_Alignas', '_Generic', '_Static_assert',
        ]
    keyword:
        pattern: "normal_keyword / storage_class / type_qualifier / function_specifier / extra_keywords"
        capture: keyword
    errno:
        words: [
            'E2BIG', 'EACCES', 'EADDRINUSE', 'EADDRNOTAVAIL', 'EAFNOSUPPORT', 
            'EAGAIN', 'EALREADY', 'EBADF', 'EBADMSG', 'EBUSY', 'ECANCELED', 'ECHILD',
            'ECONNABORTED', 'ECONNREFUSED', 'ECONNRESET', 'EDEADLK', 'EDESTADDRREQ',
            'EDOM', 'EDQUOT', 'EEXIST', 'EFAULT', 'EFBIG', 'EHOSTUNREACH', 'EIDRM',
            'EILSEQ', 'EINPROGRESS', 'EINTR', 'EINVAL', 'EIO', 'EISCONN', 'EISDIR',
            'ELOOP', 'EMFILE', 'EMLINK', 'EMSGSIZE', 'EMULTIHOP', 'ENAMETOOLONG',
            'ENETDOWN', 'ENETRESET', 'ENETUNREACH', 'ENFILE', 'ENOBUFS', 'ENODATA',
            'ENODEV', 'ENOENT', 'ENOEXEC', 'ENOLCK', 'ENOLINK', 'ENOMEM',
            'ENOMSG', 'ENOPROTOOPT', 'ENOSPC', 'ENOSR', 'ENOSTR', 'ENOSYS',
            'ENOTCONN', 'ENOTDIR', 'ENOTEMPTY', 'ENOTRECOVERABLE', 'ENOTSOCK',
            'ENOTSUP', 'ENOTTY', 'ENXIO', 'EOPNOTSUPP', 'EOVERFLOW', 'EOWNERDEAD',
            'EPERM', 'EPIPE', 'EPROTO', 'EPROTONOSUPPORT', 'EPROTOTYPE', 'ERANGE',
            'EROFS', 'ESPIPE', 'ESRCH', 'ESTALE', 'ETIME', 'ETIMEDOUT', 'ETXTBSY',
            'EWOULDBLOCK', 'EXDEV',
        ]
    preproc_macros:
        words: [
            '__DATE__', '__FILE__', '__LINE__', '__TIME__',
            '__func__', "sizeof", "_Alignof"
        ]
    normal_constant:
        words: [
            "true", "false", "NULL", "CHAR_BIT", "SIZE_MAX"
        ]
    constant:
        pattern: "normal_constant / errno / preproc_macros"
        capture: constant
    type:
        words: [
            'bool', 'char', 'double', 'float', 'int', 'long', 'short',
            'signed', 'struct', 'union', 'unsigned', 'void', '_Bool', '_Complex',
            '_Imaginary', 'ptrdiff_t', 'size_t', 'max_align_t', 'wchar_t', 'intptr_t', 'uintptr_t', 'intmax_t', 'uintmax_t'
        ]
        capture: type
    identifier:
        pattern: "word"
        capture: identifier
    operator:
        pattern: "[+\\-/*%<>~!=^&|?~:;,.()\\[\\]{}]"
        capture: operator

tokens:
    - whitespace
    - comment
    - keyword
    - type
    - constant
    - operator
    - identifier
    - string
    - number
    - preproc
