rules:
    whitespace:
        pattern: "space+"
        capture: whitespace
    keyword:
        words: [
            "break", "case", "chan", "const", "continue", "default", "defer", "else", "fallthrough", "for", "func", "go", "goto",
  "if", "import", "interface", "map", "package", "range", "return", "select", "struct", "switch", "type", "var"
        ]
        capture: keyword
    constant:
        words: ["true", "false", "iota", "nil"]
        capture: constant
    type:
        words: [
            "bool", "byte", "complex64", "complex128", "error", "float32", "float64", "int", "int8", "int16", "int32",
            "int64", "rune", "string", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr"
        ]
        capture: type
    function:
        words: [
            "append", "cap", "close", "complex", "copy", "delete", "imag", "len", "make", "new", "panic", "print", "println",
            "real", "recover"
        ]
        capture: function
    identifier:
        pattern: "word"
        capture: identifier
    sq_str:
        pattern: >-
            "'" (escape / (!"'" .))* "'"?
    dq_str:
        pattern: >-
            '"' (escape / (!'"' .))* '"'?
    escape:
        pattern: >-
            '\\' ['"tnbfr\\]
        capture: "special"
    raw_str:
        pattern: >-
            '`' (!'`' .)* '`'?
    string:
        pattern: "sq_str / dq_str / raw_str"
        capture: string
    line_comment:
        pattern: "'//' (!'\n' .)*"
    block_comment:
        pattern: "'/*' (!'*/' .)* '*/'?"
    comment:
        pattern: "line_comment / block_comment"
        capture: comment
    number:
        pattern: "(float / integer) 'i'?"
        capture: number
    operator:
        pattern: "[+\\-*/%&|^<>=!:;.,()\\[\\]{}]"
tokens: [
    "whitespace",
    "keyword",
    "constant",
    "type",
    "function",
    "identifier",
    "string",
    "comment",
    "number",
    "operator",
]
